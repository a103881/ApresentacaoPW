window.onload = function () {
    // 1. Ir buscar os dados do localStorage
    const historico = JSON.parse(localStorage.getItem("historicoOcorrencias")) || [];
    const ativas = JSON.parse(localStorage.getItem("dadosTabelaOcorrencias")) || {};
  
    const concluidas = historico.length;
    const porConcluir = Object.keys(ativas).length;
    const total = concluidas + porConcluir;
  
    // 2. Preparar o gráfico doughnut com os dados reais
    const doughnutChart = document.getElementById("doughnutChart").getContext("2d");
    new Chart(doughnutChart, {
      type: "doughnut",
      data: {
        labels: ["Total", "Por concluir", "Concluídas"],
        datasets: [{
          data: [total, porConcluir, concluidas],
          backgroundColor: ["#f3545d", "#fdaf4b", "#1d7af3"]
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "bottom"
          }
        },
        layout: {
          padding: 20
        }
      }
    });
  
    // --- 3. Função auxiliar para contar por mês ---
    function contarPorMes(ocorrencias) {
      const contagem = new Array(12).fill(0);
      ocorrencias.forEach(ocorrencia => {
        const partesData = ocorrencia.data?.split('/');
        const mes = parseInt(partesData?.[1]) - 1;
        if (!isNaN(mes) && mes >= 0 && mes <= 11) contagem[mes]++;
      });
      return contagem;
    }
  
    const ativasArray = Object.values(ativas);  // transforma o objeto num array
  
    const totalPorMes = contarPorMes([...historico, ...ativasArray]);
    const concluidasPorMes = contarPorMes(historico);
    const porConcluirPorMes = contarPorMes(ativasArray);
  
    // --- 4. Gráfico de linhas ---
    const htmlLegendsChart = document.getElementById("htmlLegendsChart");
    const ctx = htmlLegendsChart.getContext("2d");
  
    var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
    gradientStroke.addColorStop(0, "#177dff");
    gradientStroke.addColorStop(1, "#80b6f4");
  
    var gradientFill = ctx.createLinearGradient(500, 0, 100, 0);
    gradientFill.addColorStop(0, "rgba(23, 125, 255, 0.7)");
    gradientFill.addColorStop(1, "rgba(128, 182, 244, 0.3)");
  
    var gradientStroke2 = ctx.createLinearGradient(500, 0, 100, 0);
    gradientStroke2.addColorStop(0, "#f3545d");
    gradientStroke2.addColorStop(1, "#ff8990");
  
    var gradientFill2 = ctx.createLinearGradient(500, 0, 100, 0);
    gradientFill2.addColorStop(0, "rgba(243, 84, 93, 0.7)");
    gradientFill2.addColorStop(1, "rgba(255, 137, 144, 0.3)");
  
    var gradientStroke3 = ctx.createLinearGradient(500, 0, 100, 0);
    gradientStroke3.addColorStop(0, "#fdaf4b");
    gradientStroke3.addColorStop(1, "#ffc478");
  
    var gradientFill3 = ctx.createLinearGradient(500, 0, 100, 0);
    gradientFill3.addColorStop(0, "rgba(253, 175, 75, 0.7)");
    gradientFill3.addColorStop(1, "rgba(255, 196, 120, 0.3)");
  
    var myHtmlLegendsChart = new Chart(ctx, {
      type: "line",
      data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [
          {
            label: "Total",
            borderColor: gradientStroke2,
            pointBackgroundColor: gradientStroke2,
            pointRadius: 0,
            backgroundColor: gradientFill2,
            legendColor: "#f3545d",
            fill: true,
            borderWidth: 1,
            data: totalPorMes,
          },
          {
            label: "Por concluir",
            borderColor: gradientStroke3,
            pointBackgroundColor: gradientStroke3,
            pointRadius: 0,
            backgroundColor: gradientFill3,
            legendColor: "#fdaf4b",
            fill: true,
            borderWidth: 1,
            data: porConcluirPorMes,
          },
          {
            label: "Concluídas",
            borderColor: gradientStroke,
            pointBackgroundColor: gradientStroke,
            pointRadius: 0,
            backgroundColor: gradientFill,
            legendColor: "#177dff",
            fill: true,
            borderWidth: 1,
            data: concluidasPorMes,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: { display: false },
        tooltips: {
          bodySpacing: 4,
          mode: "nearest",
          intersect: 0,
          position: "nearest",
          xPadding: 10,
          yPadding: 10,
          caretPadding: 10,
        },
        layout: {
          padding: { left: 15, right: 15, top: 15, bottom: 15 },
        },
        scales: {
          yAxes: [{
            ticks: {
              fontColor: "rgba(0,0,0,0.5)",
              fontStyle: "500",
              beginAtZero: true,
              maxTicksLimit: 5,
              padding: 20,
            },
            gridLines: { drawTicks: false, display: false },
          }],
          xAxes: [{
            gridLines: { zeroLineColor: "transparent" },
            ticks: { padding: 20, fontColor: "rgba(0,0,0,0.5)", fontStyle: "500" },
          }],
        },
        legendCallback: function (chart) {
          var text = [];
          text.push('<ul class="' + chart.id + '-legend html-legend">');
          for (var i = 0; i < chart.data.datasets.length; i++) {
            var color = chart.data.datasets[i].backgroundColor;
            if (Array.isArray(color)) color = color[0];
            text.push(
              '<li><span style="background-color:' +
              color +
              '"></span>' +
              chart.data.datasets[i].label +
              "</li>"
            );
          }
          text.push("</ul>");
          return text.join("");
        },
      },
    });
  
    // Renderizar legenda
    document.getElementById("myChartLegend").innerHTML = myHtmlLegendsChart.generateLegend();
  
      var myLegendContainer = document.getElementById("myChartLegend");
      myLegendContainer.innerHTML = myHtmlLegendsChart.generateLegend();
  
      var legendItems = myLegendContainer.getElementsByTagName("li");
      for (var i = 0; i < legendItems.length; i++) {
          legendItems[i].addEventListener("click", function(event) {
          // Exemplo básico para mostrar que legenda clicada funciona
          alert("Você clicou na legenda: " + this.textContent.trim());
          });
      }
      };

 src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js">

        async function geocodificarLocal(local) {
          // Primeiro simplifica a local
          const localSimples = simplificarLocal(local);
  
        // Se estiver no fallback, retorna coordenadas fixas
        if (locaisFixos[localSimples]) {
          return locaisFixos[localSimples];
        }
  
        try {
          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(localSimples)}`);
          if (!response.ok) throw new Error(`HTTP error ${response.status}`);
          const data = await response.json();
          if (data.length === 0) {
            console.warn("Morada- não encontrada:", local);
            return null;
          }
          return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
        } catch (error) {
          console.error("Erro ao geocodificar:", local, error);
          return null;
        }
        }
  
        function simplificarLocal(local) {
        return local.split(' - ')[0].trim();
        }
  
        const locaisFixos = {
        "Museu do Oriente, Lisboa": [38.6954, -9.1870],
        "Museu da Eletricidade (MAAT), Lisboa": [38.6961, -9.2037]
        };
      
        async function adicionarPins(ocorrencias, cor, mapa) {
          for (const ocorrencia of ocorrencias) {
            const local = ocorrencia.local;
            if (!local) continue;
  
            const coords = await geocodificarLocal(local);
            if (coords) {
              const pin = L.circleMarker(coords, {
                radius: 8,
                color: cor,
                fillColor: cor,
                fillOpacity: 0.8
              }).addTo(mapa);
              pin.bindPopup(`<strong>${ocorrencia.titulo}</strong><br>${local}`);
            }
  
            await new Promise(resolve => setTimeout(resolve, 800)); // Espera 800ms entre chamadas
          }
        }
  
      
        document.addEventListener("DOMContentLoaded", async function () {
          const mapa = L.map("map").setView([39.5, -8], 6);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          }).addTo(mapa);
      
          const dadosRaw = JSON.parse(localStorage.getItem("dadosOcorrencias")) || {};
          const dadosOcorrencias = Object.values(dadosRaw); // Agora é um array
  
          const historicoOcorrencias = JSON.parse(localStorage.getItem("historicoOcorrencias")) || [];
  
          const todasOcorrencias = [...dadosOcorrencias, ...historicoOcorrencias];
  
          for (const ocorrencia of todasOcorrencias) {
              if (!ocorrencia.local) continue;
  
              try {
                  const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(ocorrencia.local)}`);
                  const data = await response.json();
  
                  if (data && data.length > 0) {
                      const { lat, lon } = data[0];
  
                      // Verde = ativa / Vermelho = histórico
                      const cor = dadosOcorrencias.includes(ocorrencia) ? "green" : "red";
                      const icone = L.icon({
                          iconUrl: `https://maps.google.com/mapfiles/ms/icons/${cor}-dot.png`,
                          iconSize: [32, 32],
                          iconAnchor: [16, 32],
                          popupAnchor: [0, -32],
                      });
  
                      L.marker([lat, lon], { icon: icone })
                          .addTo(mapa)
                          .bindPopup(`<b>${ocorrencia.titulo}</b><br>${ocorrencia.local}`);
                  } else {
                      console.warn("Morada não encontrada:", ocorrencia.local);
                  }
              } catch (error) {
                  console.error("Erro ao geocodificar:", ocorrencia.local, error);
              }
          }
      });

        document.addEventListener('DOMContentLoaded', () => {
        const userData = JSON.parse(localStorage.getItem('googleUser'));
        if (userData) {
          const nome = userData.nome;
          const email = userData.email;
          const foto = userData.foto;
    
          if (document.getElementById('userFoto')) document.getElementById('userFoto').src = foto;
          if (document.getElementById('userFotoBig')) document.getElementById('userFotoBig').src = foto;
          if (document.getElementById('userNome')) document.getElementById('userNome').textContent = nome;
          if (document.getElementById('userNomeBig')) document.getElementById('userNomeBig').textContent = nome;
          if (document.getElementById('userEmail')) document.getElementById('userEmail').textContent = email;
        }
      });
    
      function logoutGoogle() {
        localStorage.removeItem('googleUser');
        window.location.href = 'login.html';
      }
    
      // Simulação de login Google (modo manual para teste)
      if (!localStorage.getItem("googleUser")) {
        localStorage.setItem("googleUser", JSON.stringify({
          nome: "Inês Martins",
          email: "inesn.martins14@gmail.com",
          foto: "https://i.pravatar.cc/150?img=5"
        }));
      }
